---
title: "EmoNet video predictions"
format: html
editor: visual
---

```{r}
#| include: false

require(tidyverse)
require(magrittr)

emonet_classes <- c('Adoration',
    'Aesthetic Appreciation',
    'Amusement',
    'Anxiety',
    'Awe',
    'Boredom',
    'Confusion',
    'Craving',
    'Disgust',
    'Empathic Pain',
    'Entrancement',
    'Excitement',
    'Fear',
    'Horror',
    'Interest',
    'Joy',
    'Romance',
    'Sadness',
    'Sexual Desire',
    'Surprise')

preds_framewise_20class <- read_csv(here::here("ignore", "outputs", "emonet_torch_kragel2019_test_framewise_preds.csv"))
preds_framewise <- read_csv(here::here("ignore", "outputs", "emonet_5class_test_preds.csv"))
preds_gru <- read_csv(here::here("ignore", "outputs", "emonet_gru_5class_bidirectional_test_preds.csv"))
preds_gru_oversampled <- read_csv(here::here("ignore", "outputs", "emonet_gru_lensliced_oversampled_test_preds.csv"))
test_video_classes <- read_csv(here::here("ignore", "outputs", "kragel2019_test_video_ids.csv"))

preds_framewise_20class %<>%
  left_join(test_video_classes,
            by = "video")

preds_framewise %<>%
  left_join(test_video_classes,
            by = "video")

preds_gru %<>%
  left_join(test_video_classes,
            by = "video")

preds_gru_oversampled %<>%
  left_join(test_video_classes,
            by = "video")

mode_char <- function (x) {
  stopifnot(is.character(x))
  x_levels = sort(unique(x))
  x_factor = factor(x)
  
  return (x_levels[which(tabulate(x_factor) == max(tabulate(x_factor)))])
}
```

How well does the framewise naive model perform when the modal predicted emotion class across frames is taken as the prediction for the whole video?

```{r}
preds_framewise_20class %>% 
  group_by(video, emotion) %>% 
  count(guess_1) %>% 
  arrange(video, desc(n)) %>% 
  filter(n == max(n)) %>% 
  group_by(emotion) %>% 
  summarize(acc = mean(emotion == guess_1), modal_guess = mode_char(guess_1), n_videos = n()) %>% 
  arrange(desc(n_videos))
```

```{r}
preds_framewise %>% 
  group_by(video, emotion) %>% 
  count(guess_1) %>% 
  arrange(video, desc(n)) %>% 
  filter(n == max(n)) %>% 
  group_by(emotion) %>% 
  summarize(acc = mean(emotion == guess_1), modal_guess = mode_char(guess_1), n_videos = n()) %>% 
  arrange(desc(acc))
```

```{r}
preds_gru %>% 
  group_by(emotion) %>% 
  summarize(acc = mean(guess_1 == emotion), n_videos = n()) %>% 
  arrange(desc(acc))
```


Top-5 predictions

```{r}
top5_gru_oversampled <- preds_gru_oversampled %>% 
  select(-guess_1, -frame) %>% 
  pivot_longer(cols = -c(video, emotion), names_to = "emo_class", values_to = "log_prob") %>% 
  group_by(video) %>% 
  mutate(rank = min_rank(-log_prob)) %>% 
  arrange(video, rank) %>% 
  filter(rank <= 5) %>% 
  ungroup() %>% 
  nest(guesses = -c(video, emotion)) %>% 
  mutate(top5 = map2_lgl(emotion, guesses, ~.x %in% .y$emo_class)) %>% 
  group_by(emotion) %>% 
  summarize(acc_top5 = mean(top5), n_videos = n()) %>% 
  arrange(desc(acc_top5))

top5_gru_oversampled
```

```{r}
top5_gru <- preds_gru_lensliced %>% 
  select(-guess_1, -frame) %>% 
  pivot_longer(cols = -c(video, emotion), names_to = "emo_class", values_to = "log_prob") %>% 
  group_by(video) %>% 
  mutate(rank = min_rank(-log_prob)) %>% 
  arrange(video, rank) %>% 
  filter(rank <= 5) %>% 
  ungroup() %>% 
  nest(guesses = -c(video, emotion)) %>% 
  mutate(top5 = map2_lgl(emotion, guesses, ~.x %in% .y$emo_class)) %>% 
  group_by(emotion) %>% 
  summarize(acc_top5 = mean(top5), n_videos = n()) %>% 
  arrange(desc(acc_top5))

top5_gru
```

```{r}
preds_gru_oversampled %>% 
  select(-guess_1, -frame)
```

```{r}
top5_framewise <- preds_framewise %>% 
  count(video, emotion, guess_1) %>% 
  group_by(video) %>% 
  mutate(rank = min_rank(-n)) %>% 
  arrange(video, rank) %>% 
  filter(rank <= 5) %>% 
  ungroup() %>% 
  nest(guesses = -c(video, emotion)) %>% 
  mutate(top5 = map2_lgl(emotion, guesses, ~.x %in% .y$guess_1)) %>% 
  group_by(emotion) %>% 
  summarize(acc_top5 = mean(top5), n_videos = n()) %>% 
  arrange(desc(n_videos))

top5_framewise
```
```{r}
bind_rows(gru = top5_gru,
          gru_oversampled = top5_gru_oversampled,
          framewise = top5_framewise,
          .id = "model_type") %>% 
  ggplot(aes(x = fct_reorder(emotion, n_videos, .desc = TRUE), y = acc_top5, fill = model_type)) +
  geom_col(position = "dodge") +
  guides(x = guide_axis(angle = 45))
```

