---
title: "Cowen & Keltner flow exploration"
format: html
---

```{r}
#| include: false

require(tidyverse)
require(magrittr)

mode_char <- function (x) {
  stopifnot(is.character(x))
  x_levels = sort(unique(x))
  x_factor = factor(x)
  
  return (x_levels[which(tabulate(x_factor) == max(tabulate(x_factor)))])
}

ratings <- read_csv(targets::tar_read(ck2017_ratings,
                                      store = here::here("ignore", targets::tar_config_get("store"))))

flynet_preds <- targets::tar_read(ck2017_flynet_preds,
                                  store = here::here("ignore", targets::tar_config_get("store")))

emonet_preds <- targets::tar_read(ck2017_kragel2019_preds_videowise,
                                  store = here::here("ignore", targets::tar_config_get("store")))
  
```

```{r flynet-acc}
flynet_preds %>% 
  # Because empathic pain was never guessed and yardstick requires the factor levels to match
  accuracy(truth = emotion_pred, estimate = emotion_obs)
```

```{r emonet-acc}
emonet_preds %>% 
  # Because empathic pain was never guessed and yardstick requires the factor levels to match
  accuracy(truth = emotion_pred, estimate = emotion_obs)
```


```{r make-hclust}
flynet_confusion_preplot <-flynet_preds %>% 
  count(emotion_obs, emotion_pred) %>% 
  complete(emotion_obs, emotion_pred, fill = list(n = 0L)) %>% 
  group_by(emotion_obs) %>% 
  mutate(prob = n / sum(n)) %>% 
  ungroup()

flynet_hclust <- flynet_confusion_preplot %>% 
  # All of this funky-dunkiness is bc we are averaging across pred A obs B errors and pred B obs A errors
  mutate(across(starts_with("emotion"), as.character), 
         emotions = map2(emotion_obs, emotion_pred,
                         \(x, y) set_names(sort(c(x, y)), nm = c("emotion1", "emotion2")))) %>%
  unnest_wider(emotions) %>% 
  group_by(emotion1, emotion2) %>% 
  summarize(prob = mean(prob)) %>% 
  mutate(prob = 1 - prob) %>% 
  pivot_wider(id_cols = emotion2, names_from = emotion1, values_from = prob) %>%
  column_to_rownames("emotion2") %>% 
  # This assumes the diagonal dissimilarity is 0, which is most definitely not true...
  as.dist(diag = TRUE) %>% 
  hclust(method = "ward.D")

# Do all of this stuff because I don't actually like how ggcorrplot does things.
# It fucking flips the rows and cols from the matrix to the graph!
hclust_order <- tibble(emotion_num = flynet_hclust$order) %>% 
  mutate(emotion_order = 1:n()) %>% 
  arrange(emotion_num) %>% 
  mutate(emotion = flynet_hclust$labels) %>% 
  select(-emotion_num)
```


```{r plot-emonet-confusion-matrix}
emonet_confusion_preplot <- emonet_preds %>% 
  count(emotion_obs, emotion_pred) %>% 
  complete(emotion_obs, emotion_pred, fill = list(n = 0L)) %>% 
  # No videos were predicted as empathic pain
  # so need to do this shit to patch it back in
  pivot_wider(id_cols = emotion_obs,
              names_from = emotion_pred,
              values_from = n) %>% mutate(`Empathic Pain` = 0L) %>% 
  pivot_longer(cols = -emotion_obs,
               names_to = "emotion_pred",
               values_to = "n") %>% 
  group_by(emotion_obs) %>% 
  mutate(prob = n / sum(n)) %>% 
  ungroup()

emonet_confusion_preplot %>% 
  mutate(across(starts_with("emotion_"), ~fct_relevel(.,
                                                      "Aesthetic Appreciation",
                                                      "Entrancement",
                                                      "Interest",
                                                      "Awe",
                                                      "Adoration",
                                                      "Amusement",
                                                      "Joy",
                                                      "Empathic Pain",
                                                      "Excitement",
                                                      "Fear",
                                                      "Surprise",
                                                      "Confusion",
                                                      "Horror",
                                                      "Anxiety",
                                                      "Sadness",
                                                      "Romance",
                                                      "Sexual Desire",
                                                      "Boredom",
                                                      "Disgust",
                                                      "Craving"))) %>% 
  ggplot(aes(x = emotion_pred, y = fct_rev(emotion_obs))) + 
  geom_raster(aes(fill = prob)) + 
  scale_fill_viridis_c() +
  guides(x = guide_axis(angle = 45)) +
  labs(title = "EmoNet confusion matrix")
```

```{r plot-flynet-confusion-matrix}
flynet_confusion_preplot %>% 
  left_join(hclust_order %>% 
              rename(order_observed = emotion_order), by = c("emotion_obs" = "emotion")) %>% 
  left_join(hclust_order %>% 
              rename(order_predicted = emotion_order), by = c("emotion_pred" = "emotion")) %>% 
  mutate(emotion_obs = fct_reorder(emotion_obs, order_observed),
         emotion_pred = fct_reorder(emotion_pred, order_predicted)) %>% 
  ggplot(aes(x = emotion_pred, y = fct_rev(emotion_obs))) + 
  geom_raster(aes(fill = prob)) + 
  scale_fill_viridis_c() +
  guides(x = guide_axis(angle = 45)) +
  labs(title = "FlyNet confusion matrix")
```

```{r make-model-matrices}
arousal_means <- ratings %>% 
  select(video = Filename, arousal = arousal...37, valence) %>% 
  # Keep only the TRAINING videos
  # so this has the effect of "fitting" a "model" on the training videos
  inner_join(read_csv(targets::tar_read(ck2017_kragel2019_train,
                                      store = here::here("ignore", targets::tar_config_get("store")))), 
             by = "video") %>% 
  group_by(emotion) %>% 
  summarize(across(c(arousal, valence), mean))

confusion_premodel <- flynet_confusion_preplot %>% 
  select(-n) %>% 
  rename(prob_flynet = prob) %>% 
  full_join(emonet_confusion_preplot %>% 
              select(-n) %>% 
              rename(prob_emonet = prob),
            by = c("emotion_obs", "emotion_pred")) %>% 
  mutate(dist_flynet = 1 - prob_flynet,
         dist_emonet = 1 - prob_emonet,
         fear_only = case_when(
           emotion_obs == "Fear" & emotion_pred == "Fear" ~ 0L,
           emotion_obs != "Fear" & emotion_pred != "Fear" ~ 0L,
           TRUE ~ 1L
         ),
         active_avoidance = case_when(
           emotion_obs %in% c("Fear", "Horror", "Disgust") & emotion_pred %in% c("Fear", "Horror", "Disgust") ~ 0L,
           !(emotion_obs %in% c("Fear", "Horror", "Disgust")) & !(emotion_pred %in% c("Fear", "Horror", "Disgust")) ~ 0L,
           TRUE ~ 1L
         )
  ) %>% 
  left_join(arousal_means %>% rename_with(\(x) paste0(x, "_observed"),
                                          .cols = -emotion),
            by = c("emotion_obs" = "emotion")) %>% 
  left_join(arousal_means %>% rename_with(\(x) paste0(x, "_predicted"),
                                          .cols = -emotion),
            by = c("emotion_pred" = "emotion")) %>% 
  mutate(arousal_diff = abs(arousal_observed - arousal_predicted),
         valence_diff = abs(valence_observed - valence_predicted))
```

```{r}
confusion_premodel %>% 
  lm(dist_flynet ~ fear_only, data = .) %>% 
  summary()
```

```{r}
confusion_premodel %>% 
  lm(dist_flynet ~ active_avoidance, data = .) %>% 
  summary()
```

```{r}
confusion_premodel %>% 
  lm(dist_emonet ~ valence_diff + arousal_diff, data = .) %>% 
  summary()
```

```{r}
confusion_premodel %>% 
  lm(dist_flynet ~ valence_diff + arousal_diff, data = .) %>% 
  summary()
```
