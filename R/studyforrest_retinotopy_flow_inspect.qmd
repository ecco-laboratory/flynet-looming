---
title: "Retinotopy looming in fMRI or something"
format: html
editor: visual
---

```{r}
#| include: false

require(mixOmics)
require(tidymodels)
require(plsmod)
# load tidyverse after all that stuff because there are functions in the above packages that mask select() and map()
require(tidyverse)
require(magrittr)

```

```{r}
unit_coords <- tibble(unit_num = 1:256) %>% 
  mutate(row = (unit_num - 1) %/% 16,
         col = unit_num %% 16 + 1,
         across(c(row, col), as.integer))
```

```{r plot-activation-ints-convolved-ohbm-fig1}
activation_ints_convolved <- read_rds(here::here("ignore", "outputs", "studyforrest_retinotopy_flynet_timecourses.rds"))

activation_ints_convolved %>% 
  filter(stim_type == "ring_expand") %>% 
  select(tr_num, intercept_129, intercept_136) %>% 
  pivot_longer(cols = starts_with("intercept"), 
               names_to = "unit_num", 
               values_to = "bold", 
               names_prefix = "intercept_", 
               names_transform = list(unit_num = as.integer)) %>% 
  mutate(tr_num = tr_num - 2L) %>% 
  ggplot(aes(x = tr_num, y = bold, color = factor(unit_num))) + 
  geom_line() + 
  geom_vline(xintercept = seq(16, 80, 16), linetype = "dotted") +
  scale_color_manual(values = c("red", "blue")) +
  labs(x = "TR", y = "Predicted BOLD from encoding model") +
  theme_bw(base_size = 14)
```

```{r load-fmri-data}
sc_data <- get_phil_matlab_fmri_data("/home/data/eccolab/studyforrest-data-phase2/DATA_bpf.mat",
                                     region = "sc",
                                     tr_start = 3,
                                     tr_end = 82)

mask_nifti <- RNifti::readNifti("/home/data/eccolab/studyforrest-data-phase2/SC_mask_vox_indx.nii")

# which() repeats the x coords fastest, then y, then z
# which should be the same as what matlab is doing 
# when Phil's code collapses the voxels to 1d
mask_voxel_coords <- which(mask_nifti != 0, arr.ind = TRUE) %>% 
  as_tibble() %>% 
  rename(x = dim1, y = dim2, z = dim3) %>% 
  mutate(voxel_num = 1:n()) %>% 
  mutate(side = if_else(x <= 39, "right", "left"))
```

```{r load-prf-preds}

```

```{r}
fmri_data %>% 
  group_by(subj_num, stim_type) %>% 
  mutate(across(starts_with("voxel"), ~c(scale(.)))) %>% 
  ungroup() %>% 
  pivot_longer(cols = starts_with("voxel"),
               names_to = "voxel_num",
               values_to = "bold",
               names_prefix = "voxel_",
               names_transform = list(voxel_num = as.integer)) %>% 
  left_join(mask_voxel_coords %>% 
              select(voxel_num, side),
            by = "voxel_num") %>% 
  group_by(stim_type, side, tr_num) %>% 
  summarize(mean_bold = mean(bold, na.rm = TRUE)) %>% 
  ggplot(aes(x = tr_num, y = mean_bold)) +
  geom_line(aes(color = side, group = side), size = 0.3, alpha = 0.8) +
  facet_wrap(~ stim_type)
```

\_

```{r}
voxel_correlations <- fmri_data %>% 
  select(stim_type, starts_with("voxel")) %>% 
  nest(data = -stim_type) %>% 
  mutate(cormat = map(data, ~as_tibble(cor(.), rownames = "row"))) %>% 
  select(-data) %>% 
  unnest(cormat) %>% 
  pivot_longer(cols = starts_with("voxel"), 
               names_to = "col", 
               values_to = "correlation") %>% 
  separate(col = row, into = c(NA, "row"), convert = TRUE) %>% 
  separate(col = col, into = c(NA, "col"), convert = TRUE)

voxel_physical_distances <- mask_voxel_coords %>% 
  select(-voxel_num) %>% 
  dist() %>%
  as.matrix() %>% 
  as_tibble(rownames = "row") %>% 
  pivot_longer(cols = -row, 
               names_to = "col", 
               values_to = "distance") %>% 
  mutate(across(c(row, col), as.integer))

voxel_correlations %>% 
  ggplot(aes(x = col, y = row, fill = correlation)) + 
  geom_raster() + 
  scale_y_reverse() + 
  scale_fill_gradient2() + 
  facet_wrap(~stim_type)
```

```{r eventual-tidymodels-feature-suggest}
#| eval: false

# can't use tidymodels fit_resamples() because .estimate_metrics doesn't support multiple outcome variables. YET!
pls_rmse <- function (data, ...) {
  UseMethod("pls_rmse")
}

pls_rmse <- new_numeric_metric(pls_rmse, direction = "minimize")

pls_rmse.data.frame <- function (data, truth, estimate, na_rm = TRUE, ...) {
  truth_char <- rlang::as_string(truth)
  data_long <- data %>% 
    rename_with(~paste0(".truth_", .),
                .cols = starts_with(truth_char)) %>% 
    pivot_longer(cols = contains(truth_char),
                 names_to = c(".value", "outcome_num"),
                 names_pattern = glue::glue("(.*)_{truth_char}_(.*)"))
  
  rmse(ring_expand_pred, truth = .truth, estimate = .pred)
}

```

```{r load-pls-results}
metrics_sc <- read_rds(here::here("ignore", "outputs", "studyforrest_retinotopy_sc_pls_metrics.rds"))

metrics_v1 <- read_rds(here::here("ignore", "outputs", "studyforrest_retinotopy_v1_pls_metrics.rds"))

metrics_sc_perm <- read_rds(here::here("ignore", "outputs", "studyforrest_retinotopy_sc_pls_metrics_permuted.rds"))
```

```{r regular-q2}
metrics_sc %>% 
  select(stim_type, fold_num, perf_overall) %>% 
  unnest(perf_overall) %>% 
  group_by(stim_type, encoding_type) %>% 
  summarize(q2 = mean(q2),
            r2 = mean(r2)) %>% 
  arrange(q2)

metrics_v1 %>% 
  select(stim_type, fold_num, perf_overall) %>% 
  unnest(perf_overall) %>% 
  group_by(stim_type, encoding_type) %>% 
  summarize(q2 = mean(q2),
            r2 = mean(r2)) %>% 
  arrange(q2)
```

```{r plot-q2}
metrics_sc %>% 
  bind_rows(SC = .,
            V1 = metrics_v1, .id = "region") %>% 
  select(region, stim_type, fold_num, perf_subj) %>% 
  unnest(perf_subj) %>% 
  group_by(region, stim_type, encoding_type, subj_num) %>% 
  summarize(q2 = mean(q2), .groups = "drop") %>% 
  # must separately relevel and recode because recode doesn't change level order
  mutate(highlight_me = stim_type == "ring_expand" & region == "SC" & encoding_type == "flynet",
         stim_type = fct_relevel(stim_type, 
                                 "wedge_clock", 
                                 "wedge_counter", 
                                 "ring_contract", 
                                 "ring_expand"),
         stim_type = fct_recode(stim_type, 
                                "CW wedge" = "wedge_clock", 
                                "CCW wedge" = "wedge_counter", 
                                "Contracting ring" = "ring_contract", 
                                "Expanding ring" = "ring_expand"),
         encoding_type = dplyr::recode(encoding_type,
                                       flynet = "Collision detection model",
                                       prf = "Group-to-individual pRF model")) %>% 
  ggplot(aes(x = stim_type, y = q2, color = highlight_me)) + 
  geom_hline(yintercept = 0, linetype = "dotted") + 
  geom_hline(yintercept = 0.1, linetype = "dotted", color = "gray60") + 
  geom_boxplot(alpha = 0.8) + 
  geom_jitter(alpha = 0.5, width = 0.1) + 
  scale_color_manual(values = c("black", "coral")) +
  guides(x = guide_axis(angle = 30), color = "none") +
  facet_grid(region ~ encoding_type, scales = "free_y") +
  labs(x = "Retinotopic stimulus type", y = "cross-validated R-squared") +
  theme_bw(base_size = 14)
```

```{r partial-q2}
calc_q2_partial <- function (pred) {
  data <- pred %>% 
    filter(split_type == "test") %>% 
    select(-split_type) %>% 
    # normalize the predicted timecourses before checking variance explained stuff
    # so that the the lm betas are on the same scale
    mutate(across(c(flynet, prf), \(x) c(scale(x))))
  
  residuals_prf <- lm(obs ~ prf, data = data) %>% 
    summary() %>% 
    pluck(residuals)
  
  residuals_flynet <- lm(obs ~ flynet, data = data) %>% 
    summary() %>% 
    pluck(residuals)
  
  residuals_both <- lm(obs ~ flynet + prf, data = data) %>% 
    summary() %>% 
    pluck(residuals)
  
  q2_partial_flynet <- 1 - (sum(residuals_both^2) / sum(residuals_prf^2))
  q2_partial_prf <- 1 - (sum(residuals_both^2) / sum(residuals_flynet^2))
  
  return(list(q2_partial_flynet = q2_partial_flynet,
              q2_partial_prf = q2_partial_prf))
}
metrics_sc %>% 
  mutate(q2_partial = map(pred, calc_q2_partial)) %>% 
  select(-pred, -varexp, -perf) %>% 
  unnest_wider(q2_partial) %>% 
  group_by(stim_type) %>% 
  summarize(across(starts_with("q2_partial"), mean))
  
```

```{r q2-perm-pvals}
metrics_sc_perm %>% 
  select(stim_type, fold_num, iteration, perf_overall) %>%
  unnest(perf_overall) %>% 
  filter(encoding_type != "groupavg") %>% 
  group_by(stim_type, iteration, encoding_type) %>% 
  summarize(q2 = mean(q2), .groups = "drop") %>% 
  left_join(metrics_sc %>% 
              select(stim_type, fold_num, perf_overall) %>% 
              unnest(perf_overall) %>% 
              group_by(stim_type, encoding_type) %>% 
              summarize(q2_obs = mean(q2)),
            by = c("stim_type", "encoding_type")) %>% 
  group_by(stim_type, encoding_type) %>% 
  summarize(pval = (sum(q2_obs < q2) + 1) / (n() + 1),
            q2_obs = mean(q2_obs)) %>% 
  arrange(pval)
```

```{r q2-stim-diff-perm-pvals}
metrics_sc_perm %>% 
  select(stim_type, fold_num, iteration, perf_overall) %>%
  unnest(perf_overall) %>% 
  filter(encoding_type != "groupavg") %>% 
  group_by(stim_type, iteration, encoding_type) %>% 
  summarize(q2 = mean(q2), .groups = "drop") %>% 
  pivot_wider(names_from = stim_type, values_from = q2) %>% 
  mutate(other_three = (ring_contract + wedge_clock + wedge_counter) / 3,
         intxn = (ring_expand - ring_contract) - (wedge_counter - wedge_clock),
         together = ring_expand - other_three) %>% 
  select(-c(ring_expand, ring_contract, wedge_clock, wedge_counter, other_three)) %>% 
  left_join(metrics_sc %>% 
              select(stim_type, fold_num, perf_overall) %>% 
              unnest(perf_overall) %>% 
              filter(encoding_type != "groupavg") %>% 
              group_by(stim_type, encoding_type) %>% 
              summarize(q2 = mean(q2)) %>% 
              pivot_wider(names_from = stim_type, values_from = q2) %>% 
              mutate(other_three = (ring_contract + wedge_clock + wedge_counter) / 3,
                     intxn_obs = (ring_expand - ring_contract) - (wedge_counter - wedge_clock),
                     together_obs = ring_expand - other_three) %>% 
              select(-c(ring_contract, wedge_clock, wedge_counter, other_three)),
            by = "encoding_type") %>% 
  group_by(encoding_type) %>% 
  summarize(pval_together = (sum(together_obs < together) + 1) / (n() + 1),
            pval_intxn = (sum(intxn_obs < intxn) + 1) / (n() + 1),
            q2_obs = mean(ring_expand))
```

```{r q2-model-diff-perm-pvals}
metrics_sc_perm %>% 
  select(stim_type, fold_num, iteration, perf_overall) %>%
  unnest(perf_overall) %>% 
  filter(encoding_type != "groupavg") %>% 
  group_by(stim_type, iteration, encoding_type) %>% 
  summarize(q2 = mean(q2), .groups = "drop") %>% 
  pivot_wider(names_from = encoding_type, values_from = q2) %>% 
  mutate(q2_diff = flynet - prf) %>% 
  select(-c(flynet, prf)) %>% 
  left_join(metrics_sc %>% 
              select(stim_type, fold_num, perf_overall) %>% 
              unnest(perf_overall) %>% 
              filter(encoding_type != "groupavg") %>% 
              group_by(stim_type, encoding_type) %>% 
              summarize(q2 = mean(q2)) %>% 
              pivot_wider(names_from = encoding_type, values_from = q2) %>% 
              mutate(q2obs_diff = flynet - prf),
            by = "stim_type") %>% 
  group_by(stim_type) %>% 
  summarize(pval = (sum(q2obs_diff < q2_diff) + 1) / (n() + 1),
            q2obs_diff = mean(q2obs_diff))
```

```{r}
metrics_sc_perm %>% 
  select(stim_type, fold_num, iteration, perf_overall) %>%
  unnest(perf_overall) %>% 
  filter(encoding_type != "groupavg") %>% 
  group_by(stim_type, iteration, encoding_type) %>% 
  summarize(q2 = mean(q2), .groups = "drop") %>% 
  pivot_wider(names_from = stim_type, values_from = q2) %>% 
  mutate(other_three = (ring_contract + wedge_clock + wedge_counter) / 3,
         q2_diff = ring_expand - other_three) %>% 
  select(-c(ring_expand, ring_contract, wedge_clock, wedge_counter, other_three)) %>% 
  pivot_wider(names_from = encoding_type, values_from = q2_diff) %>% 
  mutate(q2_diff = flynet - prf) %>% 
  left_join(metrics_sc %>% 
              select(stim_type, fold_num, perf_overall) %>% 
              unnest(perf_overall) %>% 
              filter(encoding_type != "groupavg") %>% 
              group_by(stim_type, encoding_type) %>% 
              summarize(q2 = mean(q2)) %>% 
              pivot_wider(names_from = stim_type, values_from = q2) %>% 
              mutate(other_three = (ring_contract + wedge_clock + wedge_counter) / 3,
                     q2_diff = ring_expand - other_three) %>% 
              select(-c(ring_expand, ring_contract, wedge_clock, wedge_counter, other_three)) %>% 
              pivot_wider(names_from = encoding_type, values_from = q2_diff) %>% 
              mutate(q2obs_diff = flynet - prf),
            by = character()) %>% 
  summarize(pval = (sum(q2obs_diff < q2_diff) + 1) / (n() + 1),
            q2obs_diff = mean(q2obs_diff))
```

Ask the boss man: why are the PLS predicted timecourses so much smaller standard deviation than the observed values?

```{r plot-pls-predicted-timecourses}
# Not going in the OHBM abstract figure anymore because the predictions are shite
metrics_sc %>% 
  filter(stim_type == "ring_expand") %>% 
  select(-varexp, -perf) %>% 
  unnest(pred) %>% 
  filter(split_type == "test") %>% 
  # 90 was the best voxel
  # 151 appears to be the median voxel so we'll do that to be less crazy
  filter(voxel_num == 151) %>% 
  select(-prf) %>% 
  # WHY is the SD of the flynet-pls-predicted timecourse so much smaller
  group_by(subj_num) %>% 
  # mutate(flynet = c(scale(flynet))) %>% 
  ungroup() %>% 
  pivot_longer(cols = c(obs, flynet), 
               names_to = "data_type", 
               values_to = "bold") %>% 
  mutate(data_type = dplyr::recode(data_type, obs = "observed", flynet = "predicted"),
         subj_num = sprintf("S%02d", subj_num),
         tr_num = tr_num - 2L) %>% 
  ggplot(aes(x = tr_num, y = bold, color = data_type)) + 
  geom_line() +
  geom_vline(xintercept = seq(16, 80, 16), linetype = "dotted", color = "gray40") +
  scale_color_manual(values = c(observed = "black", predicted = "seagreen2")) +
  facet_wrap(~ subj_num, nrow = 3) +
  labs(x = "TR", y = "BOLD", color = "Timecourse") +
  theme_bw(base_size = 15)

```

```{r}
metrics_sc %>% 
  filter(stim_type == "ring_expand") %>% 
  select(-varexp, -perf) %>% 
  unnest(pred) %>% 
  filter(split_type == "test") %>% 
  # NOT grouping by encoding_type bc groupavg should be taken across the train and test subjs
  mutate(error = obs - flynet) %>% 
  select(-flynet, -prf) %>% 
  group_by(subj_num, voxel_num) %>% 
  summarize(tss = sum((obs - mean(obs))^2),
            rss = sum(error^2),
            .groups = "drop") %>% 
  mutate(q2 = 1 - (rss/tss)) %>% 
  select(-tss, -rss) %>% 
  filter(voxel_num == 151) %>% 
  ggplot(aes(x = q2)) +
  geom_histogram(bins = 12) +
  theme_bw(base_size = 14)
```

```{r project-pls-q2-to-brain}
metrics_sc_by_voxel <- metrics_sc %>% 
  select(-varexp, -perf) %>% 
  unnest(pred) %>% 
  filter(split_type == "test") %>% 
  # NOT grouping by encoding_type bc groupavg should be taken across the train and test subjs
  mutate(across(c(flynet, prf), \(x) {x - obs}, .names = "error_{.col}")) %>% 
  select(-flynet, -prf) %>% 
  pivot_longer(cols = starts_with("error"),
               names_to = "encoding_type",
               values_to = "error",
               names_prefix = "error_") %>% 
  group_by(stim_type, encoding_type, voxel_num) %>% 
  summarize(tss = sum((obs - mean(obs))^2),
            rss = sum(error^2),
            .groups = "drop") %>% 
  mutate(q2 = 1 - (rss/tss)) %>% 
  select(-tss, -rss) %>%
  right_join(mask_voxel_coords, by = "voxel_num") %>% 
  nest(values = -c(stim_type, encoding_type))

for (row in 1:nrow(metrics_sc_by_voxel)) {
  this_stim_type <- metrics_sc_by_voxel$stim_type[row]
  this_encoding_type <- metrics_sc_by_voxel$encoding_type[row]
  these_metrics <- metrics_sc_by_voxel$values[[row]]
  this_mask <- mask_nifti
  for (voxel in 1:nrow(these_metrics)) {
    this_row <- these_metrics %>% 
      slice(voxel)
    this_mask[this_row$x, this_row$y, this_row$z] <- this_row$q2
  }
  this_mask_path <- glue::glue("/home/data/eccolab/studyforrest-data-phase2/SC_pls_q2_{this_stim_type}_{this_encoding_type}.nii")
  RNifti::writeNifti(this_mask, this_mask_path)
}

```

```{r project-pls-ring-expand-q2-to-brain}
sc_ring_expand_flynet_q2_by_voxel <- metrics_sc %>% 
  filter(stim_type == "ring_expand") %>% 
  select(fold_num, perf_voxel) %>%
  unnest(perf_voxel) %>% 
  rename(q2_obs = q2)
# on the one that was run only on ring expand right now
# because... time. pls
sc_ring_expand_flynet_q2_suprathreshold_voxels <- metrics_sc_perm %>% 
  select(fold_num, iteration, perf_voxel) %>%
  unnest(perf_voxel) %>% 
  left_join(sc_ring_expand_flynet_q2_by_voxel %>% 
              group_by(fold_num, encoding_type, voxel_num) %>% 
              summarize(q2_obs = mean(q2_obs)),
            by = c("fold_num", "encoding_type", "voxel_num")) %>% 
  group_by(encoding_type, voxel_num) %>% 
  summarize(pval = mean(q2_obs < q2),
            q2_obs = mean(q2_obs)) %>% 
  arrange(pval) %>% 
  filter(pval < .05) %>% 
  left_join(mask_voxel_coords, by = "voxel_num")

for (this_pval in c(.05, .01, .005)) {
  this_mask <- mask_nifti
  this_mask[ , , ] <- 0L
  # this is in glue pkg specification, seems easiest here
  this_mask_path <- "/home/data/eccolab/studyforrest-data-phase2/SC_pls_q2_ring_expand_flynet_p{str_sub(as.character(this_pval), start = 3L)}_mask.nii"
  these_voxels <- sc_ring_expand_flynet_q2_suprathreshold_voxels %>% 
    filter(pval < this_pval)
  for (voxel in 1:nrow(these_voxels)) {
    this_row <- these_voxels %>% 
      slice(voxel)
    this_mask[this_row$x, this_row$y, this_row$z] <- 1L
  }
  RNifti::writeNifti(this_mask, glue::glue(this_mask_path))
}

# for the map where the p-values are actually put into the stat map
this_mask <- mask_nifti
this_mask[ , , ] <- -1L
for (voxel in 1:nrow(sc_ring_expand_flynet_q2_suprathreshold_voxels)) {
  this_row <- sc_ring_expand_flynet_q2_suprathreshold_voxels %>% 
    slice(voxel)
  this_mask[this_row$x, this_row$y, this_row$z] <- this_row$pval
}
RNifti::writeNifti(this_mask, "/home/data/eccolab/studyforrest-data-phase2/SC_pls_q2_ring_expand_flynet_pvals.nii")

```
